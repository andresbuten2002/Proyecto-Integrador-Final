{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Project Template A low dependency and really simple to start project template for Python Projects. Streamlit es un marco de desarrollo de c\u00f3digo abierto que permite crear aplicaciones web interactivas utilizando solo Python. Es especialmente popular en el campo de la ciencia de datos y el aprendizaje autom\u00e1tico debido a su facilidad de uso y su capacidad para crear aplicaciones web r\u00e1pidamente sin tener que escribir c\u00f3digo HTML, CSS o JavaScript. Streamlit proporciona una amplia variedad de widgets interactivos que los usuarios pueden usar para crear interfaces de usuario intuitivas y atractivas. Estos widgets incluyen controles deslizantes, botones, cuadros de texto y m\u00e1s, que permiten a los usuarios interactuar con los datos y ajustar los par\u00e1metros de la aplicaci\u00f3n en tiempo real. Una de las caracter\u00edsticas m\u00e1s destacadas de Streamlit es su capacidad para actualizar autom\u00e1ticamente la interfaz de usuario en funci\u00f3n de los cambios en el c\u00f3digo subyacente. Esto significa que los desarrolladores pueden hacer cambios en su c\u00f3digo y ver los resultados instant\u00e1neamente en la aplicaci\u00f3n web sin tener que recargar la p\u00e1gina. Por otro lado, se integra perfectamente con bibliotecas populares de visualizaci\u00f3n de datos en Python, como Matplotlib, Plotly y Altair. Esto permite a los usuarios crear gr\u00e1ficos y visualizaciones de datos de alta calidad y mostrarlos en sus aplicaciones web con solo unas pocas l\u00edneas de c\u00f3digo. Una vez que se ha creado una aplicaci\u00f3n en Streamlit, desplegarla en l\u00ednea es f\u00e1cil Este repositorio demuestra c\u00f3mo utilizar Streamlit para implementar algunas apps. What is included on this template? \ud83e\udd16 A Makefile with the most useful commands to install, test, lint, format and release your project. \ud83d\udcc3 Documentation structure using mkdocs \ud83d\udcac Auto generation of change log using gitchangelog to keep a HISTORY.md file automatically based on your commit history on every release. \ud83d\udc0b A simple Containerfile to build a container image for your project. Containerfile is a more open standard for building container images than Dockerfile, you can use buildah or docker with this file. \ud83e\uddea Testing structure using pytest \ud83d\udef3\ufe0f Automatic release to PyPI using twine and github actions. \ud83d\udd04 Continuous integration using Github Actions with jobs to lint, test and release your project on Linux, Mac and Windows environments. Instalaci\u00f3n Clonar el repositorio git clone git@github.com:andresbuten2002/Proyecto-Integrador-Final.git docker built -t \"nombre de la imagen:tag\" . Instalar Streamlit localmente. Esto es opcional, ya que hay tres formas de usar las aplicaciones, tal como se demuestra m\u00e1s abajo. pip install streamlit streamlit hello #Validar instalaci\u00f3n Instalar requerimientos. Dentro del mismo se encuentra streamlit y psutils (necesario para una de las apps). Como contiene streamlit, se puede obviar el paso 2. pip install -r requirements.txt Streamlit requiere Python 3.8+. Creaci\u00f3n Entorno Virtual Es muy recomendable usar un entorno virtual para su proyecto porque instalar o actualizar un paquete de Python puede causar efectos no intencionales en otro paquete. venv es la opci\u00f3n est\u00e1ndar. Procediendo con el entorno venv, se debe crear un nuevo directorio para empezar. mkdir my_app_name cd my_app_name Reemplazar my_app_name con el nombre de tu proyecto. Cambiar al nuevo directorio. Luego, se debe configuar el entorno virtual. python3 -m venv .venv source .venv/bin/activate Usage Este repositorio dispone de tres programas para utilizar. app.py muestra una barra de progreso que se actualiza din\u00e1micamente para mostrar el progreso de una larga tarea de computaci\u00f3n. La aplicaci\u00f3n correspondiente al archivo pc.py muestra algo de informaci\u00f3n de tu m\u00e1quina en tiempo real(cada vez que recargues la p\u00e1gina). Por otro lado, La aplicaci\u00f3n correspondiente al archivo uber_pickups.py permite visualizar los datos de recogida de Uber en la ciudad de Nueva York. Puedes seleccionar la hora mediante una barra deslizadora. Hay varias maneras de usar, igualmente v\u00e1lidas si se usan entornos virtuales o no. 1. Para inicializar un proyecto debes crear un archivo archivo.py y modificarlo seg\u00fan el programa que desees crear. Aqu\u00ed es donde escribir\u00e1s la l\u00f3gica de tu app. Puedes copiar los archivos .py que estan en este repositorio. Para correr esa aplicaci\u00f3n, se debe ejecutar: streamlit run \"archivo\".py Utilizar el archivo de Containerfile. En el caso de que requieras clonar el repositorio y obtener los archivos debes generar la imagen, antes del contenedor, a partir del Containerfile que se encuentran en esta carpeta, principalmente el Dockerfile. Para hacerlo, debes ejecutar los siguientes comandos: docker built -t \"nombre de la imagen:tag\" . Con la imagen ya creada, procedes a crear el contenedor. Para ello debes implementar el siguiente comando: docker run -it --network host \"nombre de la imagen:tag\" Para correr algunas de las apps, debes ejecutar el siguiente comando: streamlit run \"archivo\".py La aplicaci\u00f3n ya deber\u00eda correr en la direcci\u00f3n IP de tu localhost y el puerto 8501. Puedes acceder desde otro dispositivo mediante la direcci\u00f3n IP correspondiente y el puerto 8501. La tercer manera de correr la aplicaci\u00f3n es accediendo a la imagen ya creada en DockerHub. El repositorio se encuentra en: bocha2002/streamlit . All\u00ed deber implementar el siguiente comando para obtener el archivo de Dockerfile. Recuerda que debes haber iniciado sesi\u00f3n con docker login en tu terminal. docker pull bocha2002/streamlit:1.0 Una vez que ya tienes la imagen descargada solo debes levantar el contenedor. Para ello debes implementar el siguiente comando: docker run -it --network host bocha2002/streamlit:1.0 De la misma manera que antes, debes elegir que app ejecutar, modificar o crear una nueva. Despu\u00e9s, en la direcci\u00f3n de (http://localhost:8501) ya tienes tu app corriendo. Puedes acceder desde otro dispositivo mediante la direcci\u00f3n IP correspondiente y el puerto 8501. Development Read the CONTRIBUTING.md file.","title":"Python Project Template"},{"location":"#python-project-template","text":"A low dependency and really simple to start project template for Python Projects. Streamlit es un marco de desarrollo de c\u00f3digo abierto que permite crear aplicaciones web interactivas utilizando solo Python. Es especialmente popular en el campo de la ciencia de datos y el aprendizaje autom\u00e1tico debido a su facilidad de uso y su capacidad para crear aplicaciones web r\u00e1pidamente sin tener que escribir c\u00f3digo HTML, CSS o JavaScript. Streamlit proporciona una amplia variedad de widgets interactivos que los usuarios pueden usar para crear interfaces de usuario intuitivas y atractivas. Estos widgets incluyen controles deslizantes, botones, cuadros de texto y m\u00e1s, que permiten a los usuarios interactuar con los datos y ajustar los par\u00e1metros de la aplicaci\u00f3n en tiempo real. Una de las caracter\u00edsticas m\u00e1s destacadas de Streamlit es su capacidad para actualizar autom\u00e1ticamente la interfaz de usuario en funci\u00f3n de los cambios en el c\u00f3digo subyacente. Esto significa que los desarrolladores pueden hacer cambios en su c\u00f3digo y ver los resultados instant\u00e1neamente en la aplicaci\u00f3n web sin tener que recargar la p\u00e1gina. Por otro lado, se integra perfectamente con bibliotecas populares de visualizaci\u00f3n de datos en Python, como Matplotlib, Plotly y Altair. Esto permite a los usuarios crear gr\u00e1ficos y visualizaciones de datos de alta calidad y mostrarlos en sus aplicaciones web con solo unas pocas l\u00edneas de c\u00f3digo. Una vez que se ha creado una aplicaci\u00f3n en Streamlit, desplegarla en l\u00ednea es f\u00e1cil Este repositorio demuestra c\u00f3mo utilizar Streamlit para implementar algunas apps.","title":"Python Project Template"},{"location":"#what-is-included-on-this-template","text":"\ud83e\udd16 A Makefile with the most useful commands to install, test, lint, format and release your project. \ud83d\udcc3 Documentation structure using mkdocs \ud83d\udcac Auto generation of change log using gitchangelog to keep a HISTORY.md file automatically based on your commit history on every release. \ud83d\udc0b A simple Containerfile to build a container image for your project. Containerfile is a more open standard for building container images than Dockerfile, you can use buildah or docker with this file. \ud83e\uddea Testing structure using pytest \ud83d\udef3\ufe0f Automatic release to PyPI using twine and github actions. \ud83d\udd04 Continuous integration using Github Actions with jobs to lint, test and release your project on Linux, Mac and Windows environments.","title":"What is included on this template?"},{"location":"#instalacion","text":"Clonar el repositorio git clone git@github.com:andresbuten2002/Proyecto-Integrador-Final.git docker built -t \"nombre de la imagen:tag\" . Instalar Streamlit localmente. Esto es opcional, ya que hay tres formas de usar las aplicaciones, tal como se demuestra m\u00e1s abajo. pip install streamlit streamlit hello #Validar instalaci\u00f3n Instalar requerimientos. Dentro del mismo se encuentra streamlit y psutils (necesario para una de las apps). Como contiene streamlit, se puede obviar el paso 2. pip install -r requirements.txt Streamlit requiere Python 3.8+.","title":"Instalaci\u00f3n"},{"location":"#creacion-entorno-virtual","text":"Es muy recomendable usar un entorno virtual para su proyecto porque instalar o actualizar un paquete de Python puede causar efectos no intencionales en otro paquete. venv es la opci\u00f3n est\u00e1ndar. Procediendo con el entorno venv, se debe crear un nuevo directorio para empezar. mkdir my_app_name cd my_app_name Reemplazar my_app_name con el nombre de tu proyecto. Cambiar al nuevo directorio. Luego, se debe configuar el entorno virtual. python3 -m venv .venv source .venv/bin/activate","title":"Creaci\u00f3n Entorno Virtual"},{"location":"#usage","text":"Este repositorio dispone de tres programas para utilizar. app.py muestra una barra de progreso que se actualiza din\u00e1micamente para mostrar el progreso de una larga tarea de computaci\u00f3n. La aplicaci\u00f3n correspondiente al archivo pc.py muestra algo de informaci\u00f3n de tu m\u00e1quina en tiempo real(cada vez que recargues la p\u00e1gina). Por otro lado, La aplicaci\u00f3n correspondiente al archivo uber_pickups.py permite visualizar los datos de recogida de Uber en la ciudad de Nueva York. Puedes seleccionar la hora mediante una barra deslizadora. Hay varias maneras de usar, igualmente v\u00e1lidas si se usan entornos virtuales o no. 1. Para inicializar un proyecto debes crear un archivo archivo.py y modificarlo seg\u00fan el programa que desees crear. Aqu\u00ed es donde escribir\u00e1s la l\u00f3gica de tu app. Puedes copiar los archivos .py que estan en este repositorio. Para correr esa aplicaci\u00f3n, se debe ejecutar: streamlit run \"archivo\".py Utilizar el archivo de Containerfile. En el caso de que requieras clonar el repositorio y obtener los archivos debes generar la imagen, antes del contenedor, a partir del Containerfile que se encuentran en esta carpeta, principalmente el Dockerfile. Para hacerlo, debes ejecutar los siguientes comandos: docker built -t \"nombre de la imagen:tag\" . Con la imagen ya creada, procedes a crear el contenedor. Para ello debes implementar el siguiente comando: docker run -it --network host \"nombre de la imagen:tag\" Para correr algunas de las apps, debes ejecutar el siguiente comando: streamlit run \"archivo\".py La aplicaci\u00f3n ya deber\u00eda correr en la direcci\u00f3n IP de tu localhost y el puerto 8501. Puedes acceder desde otro dispositivo mediante la direcci\u00f3n IP correspondiente y el puerto 8501. La tercer manera de correr la aplicaci\u00f3n es accediendo a la imagen ya creada en DockerHub. El repositorio se encuentra en: bocha2002/streamlit . All\u00ed deber implementar el siguiente comando para obtener el archivo de Dockerfile. Recuerda que debes haber iniciado sesi\u00f3n con docker login en tu terminal. docker pull bocha2002/streamlit:1.0 Una vez que ya tienes la imagen descargada solo debes levantar el contenedor. Para ello debes implementar el siguiente comando: docker run -it --network host bocha2002/streamlit:1.0 De la misma manera que antes, debes elegir que app ejecutar, modificar o crear una nueva. Despu\u00e9s, en la direcci\u00f3n de (http://localhost:8501) ya tienes tu app corriendo. Puedes acceder desde otro dispositivo mediante la direcci\u00f3n IP correspondiente y el puerto 8501.","title":"Usage"},{"location":"#development","text":"Read the CONTRIBUTING.md file.","title":"Development"}]}